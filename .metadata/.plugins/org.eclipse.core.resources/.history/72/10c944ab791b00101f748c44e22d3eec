package com.weshopify.platform.outbound;

import java.net.http.HttpResponse.ResponseInfo;
import java.util.Base64;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.weshopify.platform.model.WSO2UserAuthnBean;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
@Component
@Slf4j
public class IamAuthnCommunicator {
	@Autowired
	RestTemplate restTemplate;
	@Autowired
	ObjectMapper objectMapper;
	
	@Value("${weshopify.oauth2.uri}")
	private String authnUri;
	private String username;
	private String password;
	@Value("${weshopify.oauth2.clientId}")
	private String clientId;
	@Value("${weshopify.oauth2.clientSecret}")
	private String clientSecret;
	@Value("${weshopify.oauth2.grantType}")
	private String grantType;
	@Value("${weshopify.oauth2.scope}")
	private String scope;
	public String authenticate(WSO2UserAuthnBean authnBean) {
		authnBean.setGrant_type(grantType);
		authnBean.setScope(scope);
		authnBean.setUsername(username);
		authnBean.setPassword(password);
		try {
			String payload=objectMapper.writeValueAsString(authnBean);
			HttpEntity<String> requestBody=prepareRequestBody(authnBean);
			ResponseEntity<String> apiResponse=restTemplate.exchange(authnUri, HttpMethod.POST, requestBody, String.class);
			
		} catch (JsonProcessingException e) {
			
			e.printStackTrace();
		}
		
		return null;
	}

	public HttpEntity<String> prepareRequestBody(WSO2UserAuthnBean authnBean) {
		HttpEntity<String> requestBody = null;
		String combinedCreds = clientId + ":" + clientSecret;

		String encodedAdminCreds = Base64.getEncoder().encodeToString(combinedCreds.getBytes());
//		log.info(encodedAdminCreds);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Authorization", "Basic " + encodedAdminCreds);

		if (StringUtils.isBlank(authnBean) || StringUtils.isEmpty(authnBean)) {
			requestBody = new HttpEntity<>(headers);
		} else {
			headers.add("Content-Type", MediaType.APPLICATION_JSON_VALUE);
			requestBody = new HttpEntity<>(authnBean, headers);
		}

		return requestBody;
	}
}
