package com.weshopify.platform.outbound;

import java.lang.reflect.Type;
import java.util.Base64;
import java.util.List;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.weshopify.platform.beans.RoleBean;
import com.weshopify.platform.exceptions.APIException;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class RoleMgmtClient {

	@Autowired
	RestTemplate restTemplate;
	@Autowired
	ObjectMapper objectMapper;

	@Value("${iamserver.base-url}")
	private String iam_server_api_base_url;

	@Value("${iamserver.role-api}")
	private String role_api_url;

	@Value("${iamserver.username}")
	private String iam_user_name;

	@Value("${iamserver.password}")
	private String iam_password;

	@Value("${iamserver.role-api-schema}")
	private String role_api_schema;

	public List<RoleBean> findAllRoles() {
		try {

			List<RoleBean> resourcesList = null;
			String iam_role_api_url = iam_server_api_base_url + role_api_url;
//		log.info("constructod role api url:" + iam_role_api_url);

			HttpEntity<String> requestBody = prepareRequestBody(null);

			ResponseEntity<Object> apiResponse = restTemplate.exchange(iam_role_api_url, HttpMethod.GET, requestBody,
					Object.class);

			if (HttpStatus.OK.value() == apiResponse.getStatusCode().value()) {
				Object responseBody = apiResponse.getBody();
				resourcesList = parseResponse(responseBody);

			} else {
				throw new APIException(apiResponse.getBody().toString(), apiResponse.getStatusCode().value());
			}
			return Optional.ofNullable(resourcesList).get();

		} catch (Exception e) {
			throw new APIException(e.getMessage().toString(), HttpStatus.BAD_REQUEST.value());
		}
	}

	public List<RoleBean> createRole(RoleBean roleBean) {
		try {

			List<RoleBean> resourcesList = null;
			String iam_role_api_url = iam_server_api_base_url + role_api_url;
			roleBean.setSchemas(new String[] { role_api_schema });
			String rolePayload = objectMapper.writeValueAsString(roleBean);

//		String rolePayload=objectMapper.convertValue(roleBean, String.class);
			HttpEntity<String> requestBody = prepareRequestBody(rolePayload);
			ResponseEntity<Object> apiResponse = restTemplate.exchange(iam_role_api_url, HttpMethod.POST, requestBody,
					Object.class);

			if (HttpStatus.CREATED.value() == apiResponse.getStatusCode().value()) {
//			Object responseBody=apiResponse.getBody();
				resourcesList = findAllRoles();
			} else {
				throw new APIException(apiResponse.getBody().toString(), apiResponse.getStatusCode().value());
			}
			return resourcesList;
		} catch (Exception e) {
			throw new APIException(e.getMessage(), HttpStatus.BAD_REQUEST.value());
		}
	}

	private HttpEntity<String> prepareRequestBody(String roleBeanPayload) {
		HttpEntity<String> requestBody = null;
		String combinedCreds = iam_user_name + ":" + iam_password;

		String encodedAdminCreds = Base64.getEncoder().encodeToString(combinedCreds.getBytes());
//		log.info(encodedAdminCreds);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Authorization", "Basic " + encodedAdminCreds);

		if (StringUtils.isBlank(roleBeanPayload) || StringUtils.isEmpty(roleBeanPayload)) {
			requestBody = new HttpEntity<>(headers);
		} else {
			headers.add("Content-Type", MediaType.APPLICATION_JSON_VALUE);
			requestBody = new HttpEntity<>(roleBeanPayload, headers);
		}

		return requestBody;
	}

	private List<RoleBean> parseResponse(Object responseBody) {
		List<RoleBean> resourcesList = null;
		try {
			String response = objectMapper.writeValueAsString(responseBody);
//			log.info("response body:" + response);

			JSONObject jsonResponseObject = new JSONObject(response);

			JSONArray jsonArray = (JSONArray) Optional.ofNullable(jsonResponseObject)
					.filter(condition -> jsonResponseObject.has("Resources")).get().get("Resources");

			Gson gson = new Gson();
			Type type = new TypeToken<List<RoleBean>>() {
			}.getType();
			resourcesList = gson.fromJson(jsonArray.toString(), type);
			log.info(resourcesList.toString());

		} catch (JsonProcessingException e) {
			log.error(e.getMessage());
		}
		return Optional.ofNullable(resourcesList).get();
	}
}
