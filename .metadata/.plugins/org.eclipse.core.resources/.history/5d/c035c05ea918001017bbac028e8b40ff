package com.weshopify.platform.outbound;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.weshopify.platform.beans.UserBean;
import com.weshopify.platform.exceptions.APIException;
import com.weshopify.platform.model.Wso2User;
import com.weshopify.platform.utils.ApplicationUtils;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class UserMgmtClient {

	@Autowired
	RestTemplate restTemplate;

	@Autowired
	ApplicationUtils appUtils;

	@Autowired
	ObjectMapper objectMapper;

	public List<Wso2User> findAllUsers() {
		try {
			List<Wso2User> wso2UsersList = null;
			String iam_user_api_uri = appUtils.getIam_server_api_base_url() + appUtils.getUser_api_context();
			HttpEntity<String> requestBody = appUtils.prepareRequestBody(null);
			ResponseEntity<Object> apiResponse = restTemplate.exchange(iam_user_api_uri, HttpMethod.GET, requestBody,
					Object.class);
			if (apiResponse.getStatusCode().value() == HttpStatus.OK.value()) {
				Object responseBody = apiResponse.getBody();
				wso2UsersList = appUtils.parseUserResponse(responseBody);
			} else {
				throw new APIException(apiResponse.getBody().toString(), apiResponse.getStatusCode().value());
			}
			return Optional.ofNullable(wso2UsersList).get();

		} catch (Exception e) {
			throw new APIException(e.getMessage(), HttpStatus.BAD_REQUEST.value());
		}

	}

	public List<Wso2User> createUser(Wso2User wso2User) {
		try {

			List<Wso2User> response = null;
			String iam_user_api_uri = appUtils.getIam_server_api_base_url() + appUtils.getUser_api_context();

//		log.info(wso2User.toString());

			String userPayload = objectMapper.writeValueAsString(wso2User);

			HttpEntity<String> requestBody = appUtils.prepareRequestBody(userPayload);
			ResponseEntity<Object> apiResponse = restTemplate.exchange(iam_user_api_uri, HttpMethod.POST, requestBody,
					Object.class);
			if (apiResponse.getStatusCode().value() == HttpStatus.CREATED.value()) {
				Object responseBody = apiResponse.getBody();
				log.info(responseBody.toString());
				response = findAllUsers();
			} else {
				throw new APIException(apiResponse.getBody().toString(), apiResponse.getStatusCode().value());
			}

			return Optional.ofNullable(response).get();

		} catch (Exception e) {
			throw new APIException(e.getMessage(), HttpStatus.BAD_REQUEST.value());
		}

	}

	public UserBean findUser(String userId) {
		log.info(userId);
		UserBean user=null;
		String iam_user_api_uri=appUtils.getIam_server_api_base_url()+appUtils.getUser_api_context()+"/"+userId;
		log.info(iam_user_api_uri);
		HttpEntity<String> requestBody=appUtils.prepareRequestBody(null);
		
		ResponseEntity<Object> apiResponse=restTemplate.exchange(iam_user_api_uri, HttpMethod.GET, requestBody, Object.class);
		log.info(apiResponse.toString());
		if(apiResponse.getStatusCode().value()==HttpStatus.OK.value()) {
			Object responseBody=apiResponse.getBody();
//			Wso2User user=appUtils.parseSingleUserResponse(responseBody);
//			log.info(requestBody.toString());
			
			Wso2User wso2User=objectMapper.convertValue(responseBody, Wso2User.class);
			user=UserBean.builder().emails(wso2User.getEmails()).id(wso2User.getId()).firstName(wso2User.getName().getGivenName()).lastName(wso2User.getName().getFamilyName()).mobile(wso2User.getPhoneNumbers().get(0).getValue()).userId(wso2User.getUserName()).build();
		}
		return user;

	}

}
